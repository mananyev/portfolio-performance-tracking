id: backfill_parent_flow
namespace: ppt-project


inputs:
  - id: region_json
    type: STRING
  - id: backfill_all
    type: BOOLEAN
  - id: data_from
    type: STRING
  - id: data_to
    type: STRING
  - id: reload_tickers_list
    type: BOOLEAN


variables:
  region: "{{outputs.extract.vars.region}}"
  region_tickers: "{{render(vars.region) ~ '_tickers'}}"
  all_tickers_table: "{{kv('all_tickers_table')}}"
  # all_tickers_prices_table: "{{kv('all_tickers_prices_table')}}"
  region_tickers_table: "{{kv('GCP_PROJECT_ID') ~ '.' ~ kv('GCP_DATASET') ~ '.' ~ render(vars.region) ~ '_tickers_table'}}"
  region_tickers_prices_table: "{{kv('GCP_PROJECT_ID') ~ '.' ~ kv('GCP_DATASET') ~ '.' ~ render(vars.region) ~ '_tickers_prices_table'}}"
  region_tickers_data: "{{outputs.get_all_region_tickers.outputFiles['all_tickers.csv']}}"
  region_tickers_gcs_file: "gs://{{kv('GCP_BUCKET_NAME')}}/{{render(vars.region)}}_all_tickers.csv"

tasks:
  - id: ion_to_json
    type: io.kestra.plugin.serdes.json.IonToJson
    from: "{{inputs.region_json}}"

  - id: info
    type: io.kestra.plugin.core.log.Log
    message: |
      region data: {{read(outputs.ion_to_json.uri)}}

  - id: extract
    type: io.kestra.plugin.scripts.python.Script
    containerImage: ghcr.io/kestra-io/pydata:latest  # Pre-built image with Pandas
    beforeCommands:
      - pip install kestra
    env:
      json_string: "{{read(outputs.ion_to_json.uri)}}"
    script: |
      import os
      import ast
      from kestra import Kestra

      region_dict = ast.literal_eval(os.getenv('json_string'))
      Kestra.outputs({'region': region_dict['region']})
      Kestra.outputs({'constituents_link': region_dict['link']})
      Kestra.outputs({'index_ticker': region_dict['ticker']})

  - id: create_region_tickers_prices_table
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE TABLE IF NOT EXISTS `{{render(vars.region_tickers_prices_table)}}`
      (
          unique_row_id BYTES OPTIONS (description = 'A unique identifier for the ticker-date, generated by hashing ticker and date.')
          , ticker STRING OPTIONS (description = 'The ticker symbol from Yahoo! Finance.')
          , date DATE OPTIONS (description = 'The date to which financial data corresponds.')
          , open FLOAT64 OPTIONS (description = 'Daily Open price.')
          , high FLOAT64 OPTIONS (description = 'Daily High price.')
          , low FLOAT64 OPTIONS (description = 'Daily Low price')
          , close FLOAT64 OPTIONS (description = 'Daily Close price.')
          , volume INTEGER OPTIONS (description = 'Daily Traded volume.')
          , dividends FLOAT64 OPTIONS (description = 'Daily Dividends paid.')
          , stock_splits FLOAT64 OPTIONS (description = 'Daily Stock splits.')
      );

  - id: create_region_tickers_table
    type: io.kestra.plugin.gcp.bigquery.Query
    sql: |
      CREATE TABLE IF NOT EXISTS `{{render(vars.region_tickers_table)}}`
      (
          ticker STRING OPTIONS (description = 'The ticker symbol from Yahoo! Finance.')
          , company STRING OPTIONS (description = 'Company name.')
          , region STRING OPTIONS (description = 'Company region.')
          , sector STRING OPTIONS (description = 'Company sector.')
          , industry STRING OPTIONS (description = 'Company industry.')
          , exchange STRING OPTIONS (description = 'Exchange where the ticker is traded.')
      );

  - id: check_reload_tickers
    type: io.kestra.plugin.core.flow.If
    condition: "{{inputs.reload_tickers_list == true}}"
    then:
      - id: clear_region_tickers_list
        type: io.kestra.plugin.core.kv.Delete
        key: "{{render(vars.region_tickers)}}"
        errorOnMissing: false

      - id: set_region_tickers_kv
        type: io.kestra.plugin.core.kv.Set
        key: "{{render(vars.region_tickers)}}"
        kvType: STRING
        value: ""

  - id: get_all_region_tickers_from_KV
    type: io.kestra.plugin.core.kv.Get
    key: "{{render(vars.region_tickers)}}"

  - id: check_missing_KV
    type: io.kestra.plugin.core.flow.If
    condition: "{{outputs.get_all_region_tickers_from_KV.value | length == 0}}"
    then:
      - id: log_missing_tickers_in_KV
        type: io.kestra.plugin.core.log.Log
        message: |
          {{'Did not find tickers in KV for region:' ~ render(vars.region)}}

      - id: get_all_region_tickers
        type: io.kestra.plugin.scripts.python.Commands
        namespaceFiles:
          enabled: true
        beforeCommands:
          - pip install yfinance beautifulsoup4 lxml kestra html5lib
        containerImage: ghcr.io/kestra-io/pydata:latest  # Pre-built image with Pandas
        # env:
        #   test_run: "{{inputs.test_run}}"
        inputFiles:
          data.json: "{{read(outputs.ion_to_json.uri)}}"
        outputFiles:
          - "*.csv"
        commands:
          - python scripts/get_all_tickers.py
  
      - id: store_tickers_in_KV
        type: io.kestra.plugin.core.kv.Set
        kvType: JSON
        key: "{{render(vars.region_tickers)}}"
        value: "{{outputs.get_all_region_tickers.vars.all_tickers}}"

      - id: upload_region_tickers_to_gcs
        type: io.kestra.plugin.gcp.gcs.Upload
        from: "{{render(vars.region_tickers_data)}}"
        to: "{{render(vars.region_tickers_gcs_file)}}"

      - id: copy_tickers_list_into_staging_table
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          CREATE OR REPLACE EXTERNAL TABLE `{{render(vars.region_tickers_table)}}_ext`
          (
              ticker STRING OPTIONS (description = 'The ticker symbol from Yahoo! Finance.')
              , company STRING OPTIONS (description = 'Company name.')
              , region STRING OPTIONS (description = 'Company region.')
              , sector STRING OPTIONS (description = 'Company sector.')
              , industry STRING OPTIONS (description = 'Company industry.')
              , exchange STRING OPTIONS (description = 'Exchange where the ticker is traded.')
          )
          OPTIONS (
              format = 'CSV',
              uris = ['{{render(vars.region_tickers_gcs_file)}}'],
              skip_leading_rows = 1,
              ignore_unknown_values = TRUE
          );

      - id: merge_ticker_data
        type: io.kestra.plugin.gcp.bigquery.Query
        sql: |
          MERGE INTO `{{render(vars.all_tickers_table)}}` AS M
          USING `{{render(vars.region_tickers_table)}}_ext` AS T
          ON T.ticker = M.ticker
          WHEN NOT MATCHED THEN
            INSERT (
              ticker
              , company
              , region
              , sector
              , industry
              , exchange
            )
            VALUES (
              T.ticker
              , T.company
              , T.region
              , T.sector
              , T.industry
              , T.exchange
            );

      - id: read_all_tickers_list
        type: io.kestra.plugin.core.kv.Get
        key: all_tickers

      - id: update_all_tickers_list
        type: io.kestra.plugin.scripts.python.Script
        beforeCommands:
          - pip install kestra
        # containerImage: python
        env:
          region_tickers: "{{outputs.get_all_region_tickers.vars.all_tickers}}"
          all_tickers: "{{outputs.read_all_tickers_list.value}}"
        script: |
          import os
          import ast
          from kestra import Kestra

          region_tickers = ast.literal_eval(os.getenv('region_tickers'))
          all_tickers_envv = os.getenv('all_tickers')
          if all_tickers_envv:
            all_tickers = ast.literal_eval(all_tickers_envv)
          else:
            all_tickers = []

          # print(f"region_tickers: {region_tickers}")
          # print(f"all_tickers: {all_tickers}")

          Kestra.outputs({'all_tickers': sorted(list(set(
            all_tickers + region_tickers
          )))})

      - id: store_updated_all_tickers_in_KV
        type: io.kestra.plugin.core.kv.Set
        kvType: JSON
        key: all_tickers
        value: "{{ outputs.update_all_tickers_list.vars.all_tickers }}"
        overwrite: true

    else:
      - id: log_found_region_tickers_in_KV
        type: io.kestra.plugin.core.log.Log
        message: |
          Found keys in KV foi region {{render(vars.region)}}
          {{outputs.get_all_region_tickers_from_KV}}
          
    finally:
      - id: read_region_tickers_list
        type: io.kestra.plugin.core.kv.Get
        key: "{{render(vars.region) ~ '_tickers'}}"

        # - id: loop_over_tickers
        #   type: io.kestra.plugin.core.flow.ForEach
        #   concurrencyLimit: 8
        #   values: "{{outputs.read_tickers_list.value | json}}"
        #   tasks:
      - id: subflow_run
        type: io.kestra.plugin.core.flow.Subflow
        namespace: ppt-project
        flowId: subflow_ticker_history
        inputs:
          # string_input: "{{taskrun.value}}"
          region: "{{render(vars.region)}}"
          tickers: "{{outputs.read_region_tickers_list.value}}"
          backfill_all: "{{inputs.backfill_all}}"
          data_from: "{{inputs.data_from}}"
          data_to: "{{inputs.data_to}}"

      - id: purge_files
        type: io.kestra.plugin.core.storage.PurgeCurrentExecutionFiles
        description: To avoid cluttering your storage, we will remove the downloaded files


# outputs:
#   - id: tickers
#     type: ARRAY
#     value: "{{outputs.read_region_tickers_list.value}}"


pluginDefaults:
  - type: io.kestra.plugin.gcp
    values:
      serviceAccount: "{{secret('GCP_SERVICE_ACCOUNT')}}"
      projectId: "{{kv('GCP_PROJECT_ID')}}"
      location: "{{kv('GCP_LOCATION')}}"
      bucket: "{{kv('GCP_BUCKET_NAME')}}"