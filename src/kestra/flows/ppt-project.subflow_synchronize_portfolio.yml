id: subflow_synchronize_portfolio
namespace: ppt-project
description: |
  Synchronize portfolio tickers.


inputs:
  - id: backfill_all
    type: BOOLEAN
  - id: data_from
    type: STRING
  - id: data_to
    type: STRING


variables:
  all_tickers_names_data: "{{ outputs.get_portfolio_tickers.outputFiles['portfolio_positions.csv'] }}"
  portfolio_positions_table: "{{kv('POSTGRES_SCHEMA') ~ '.portfolio_positions'}}"
  all_tickers_prices_table: "{{kv('all_tickers_prices_table')}}"


tasks:
  - id: get_portfolio_tickers_from_KV
    type: io.kestra.plugin.core.kv.Get
    key: portfolio_tickers

  - id: check_missing_kv
    type: io.kestra.plugin.core.flow.If
    condition: "{{ outputs.get_portfolio_tickers_from_KV | length == 0 }}"
    then:
      - id: log_missing_tickers_in_KV
        type: io.kestra.plugin.core.log.Log
        message: |
          Did not find portfolio tickers in KV.

      - id: download_portfolio_file
        type: io.kestra.plugin.core.http.Download
        uri: "{{kv('PORTFOLIO_LINK')}}"

      - id: get_portfolio_tickers
        type: io.kestra.plugin.scripts.python.Script
        beforeCommands:
          - pip install kestra
        containerImage: ghcr.io/kestra-io/pydata:latest  # Pre-built image with Pandas
        inputFiles:
          portfolio.json: "{{ outputs.download_portfolio_file.uri }}"
        outputFiles:
          - "portfolio_positions.csv"
        script: |
          import json
          import pandas as pd
          from kestra import Kestra

          with open("portfolio.json", 'r') as file:
              positions_data = json.load(file)

          portfolio_tickers = sorted(list(set([k for k in positions_data.keys()])))
          portfolio_df = pd.DataFrame(positions_data).T

          portfolio_df.to_csv("portfolio_positions.csv", index=True)
          Kestra.outputs({'portfolio_tickers': portfolio_tickers})

      - id: store_portfolio_tickers_in_KV
        type: io.kestra.plugin.core.kv.Set
        kvType: JSON
        key: portfolio_tickers
        value: "{{ outputs.get_portfolio_tickers.vars.portfolio_tickers }}"

      - id: create_portfolio_table
        type: io.kestra.plugin.jdbc.postgresql.Queries
        sql: |
          CREATE TABLE IF NOT EXISTS {{render(vars.portfolio_positions_table)}} (
            ticker      text,
            type        text,
            timestamp   timestamp,
            volume      double precision,
            volume_type text
          );

      - id: truncate_portfolio_positions_table
        type: io.kestra.plugin.jdbc.postgresql.Queries
        sql: |
          TRUNCATE TABLE {{render(vars.portfolio_positions_table)}};

      - id: copy_in_portfolio_positions_data
        type: io.kestra.plugin.jdbc.postgresql.CopyIn
        format: CSV
        from: "{{ outputs.get_portfolio_tickers.outputFiles['portfolio_positions.csv'] }}"
        table: "{{render(vars.portfolio_positions_table)}}"
        header: true
        columns: [ticker, type, timestamp, volume, volume_type]

    else:
      - id: log_found_portfolio_tickers_in_KV
        type: io.kestra.plugin.core.log.Log
        message: |
          Found keys in KV.

    finally:
      - id: read_portfolio_tickers_list
        type: io.kestra.plugin.core.kv.Get
        key: portfolio_tickers

      - id: read_all_tickers_list
        type: io.kestra.plugin.core.kv.Get
        key: all_tickers

      # - id: read_all_tickers_list
      #   type: io.kestra.plugin.jdbc.postgresql.Query
      #   sql: |
      #     select distinct ticker
      #     from {{render(vars.all_tickers_prices_table)}};
      #   store: true

      # - id: format_query_output
      #   type: io.kestra.plugin.serdes.csv.IonToCsv
      #   from: "{{outputs.read_all_tickers_list}}"

      # - id: display_KV
      #   type: io.kestra.plugin.core.log.Log
      #   message: |
      #     portfolio_tickers: "{{outputs.read_portfolio_tickers_list.value}}"
      #     all_tickers: "{{outputs.read_all_tickers_list.value}}"

      - id: check_portfolio_tickers_in_all_tickers
        type: io.kestra.plugin.scripts.python.Script
        containerImage: ghcr.io/kestra-io/pydata:latest  # Pre-built image with Pandas
        beforeCommands:
          - pip install kestra
        # containerImage: python
        env:
          portfolio_tickers: "{{outputs.read_portfolio_tickers_list.value}}"
          all_tickers: "{{outputs.read_all_tickers_list.value}}"
        # inputFiles:
        #   all_tickers.csv: "{{outputs['format_query_output'].uri}}"
        script: |
          import os
          import ast
          from kestra import Kestra
          import pandas as pd
          
          # all_tickers_df = pd.read_csv('all_tickers.csv')
          # all_tickers ','.join(all_tickers_df.ticker.values.tolist())
          portfolio_tickers = ast.literal_eval(os.getenv('portfolio_tickers'))
          all_tickers = ast.literal_eval(os.getenv('all_tickers'))
          missing_tickers = []
          for pt in portfolio_tickers:
            if pt not in all_tickers:
              missing_tickers.append(pt)
          
          Kestra.outputs({'missing_tickers': missing_tickers})

      - id: if_tickers_missing
        type: io.kestra.plugin.core.flow.If
        condition: "{{ outputs.check_portfolio_tickers_in_all_tickers.vars.missing_tickers | length > 0}}"
        then:
          - id: missing_portfolio_tickers_data
            type: io.kestra.plugin.core.log.Log
            message: |
              Missing following tickers:
              "{{ outputs.check_portfolio_tickers_in_all_tickers.vars.missing_tickers }}."

          # - id: load_missing_tickers_data
          #   type: io.kestra.plugin.core.flow.ForEach
          #   concurrencyLimit: 0
          #   values: "{{ outputs.check_portfolio_tickers_in_all_tickers.vars.missing_tickers }}"
          #   tasks:
          - id: subflow_run_backfill
            type: io.kestra.plugin.core.flow.Subflow
            namespace: ppt-project
            flowId: subflow_ticker_history
            inputs:
              # string_input: "{{ taskrun.value }}"
              tickers: "{{ outputs.check_portfolio_tickers_in_all_tickers.vars.missing_tickers }}"
              backfill_all: true
              data_from: "None"
              data_to: "None"

          - id: update_all_tickers_list
            type: io.kestra.plugin.scripts.python.Script
            beforeCommands:
              - pip install kestra
            # containerImage: python
            env:
              portfolio_tickers: "{{outputs.read_portfolio_tickers_list.value}}"
              all_tickers: "{{outputs.read_all_tickers_list.value}}"
            script: |
              import os
              import ast
              from kestra import Kestra

              portfolio_tickers = ast.literal_eval(os.getenv('portfolio_tickers'))
              all_tickers = ast.literal_eval(os.getenv('all_tickers'))

              Kestra.outputs({'all_tickers': sorted(list(set(
                all_tickers + portfolio_tickers
              )))})

          - id: store_updated_all_tickers_in_KV
            type: io.kestra.plugin.core.kv.Set
            kvType: JSON
            key: all_tickers
            value: "{{ outputs.update_all_tickers_list.vars.all_tickers }}"
            overwrite: true

        else:
          - id: log_no_portfolio_tickers_missing
            type: io.kestra.plugin.core.log.Log
            message: All portfolio tickers are already in the data.

        # finally:
        #   # - id: load_portfolio_tickers_data
        #   #   type: io.kestra.plugin.core.flow.ForEach
        #   #   concurrencyLimit: 0
        #   #   values: "{{ outputs.check_portfolio_tickers_in_all_tickers.vars.missing_tickers }}"
        #   #   tasks:
        #   - id: subflow_run
        #     type: io.kestra.plugin.core.flow.Subflow
        #     namespace: ppt-project
        #     flowId: subflow_ticker_history
        #     inputs:
        #       # string_input: "{{ taskrun.value }}"
        #       region: "portfolio"
        #       tickers: "{{ outputs.check_portfolio_tickers_in_all_tickers.vars.missing_tickers }}"
        #       backfill_all: "{{ inputs.backfill_all }}"
        #       data_from: "{{ inputs.data_from }}"
        #       data_to: "{{ inputs.data_to }}"


pluginDefaults:
  - type: io.kestra.plugin.jdbc.postgresql
    values:
      url: "jdbc:postgresql://{{kv('POSTGRES_HOST')}}:{{kv('POSTGRES_PORT')}}/{{kv('POSTGRES_DB_NAME')}}"
      username: "{{kv('POSTGRES_USER')}}"
      password: "{{kv('POSTGRES_PWD')}}"
